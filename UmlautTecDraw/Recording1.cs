///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace UmlautTecDraw
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Recording1 recording.
    /// </summary>
    [TestModule("513ea666-8256-4f9c-b5be-2b8aac2f8cc4", ModuleType.Recording, 1)]
    public partial class Recording1 : ITestModule
    {
        /// <summary>
        /// Holds an instance of the UmlautTecDrawRepository repository.
        /// </summary>
        public static UmlautTecDrawRepository repo = UmlautTecDrawRepository.Instance;

        static Recording1 instance = new Recording1();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Recording1()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Recording1 Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWin.PushButton' at 4;4.", repo.MainWin.PushButtonInfo, new RecordItemIndex(0));
            repo.MainWin.PushButton.Click(new Location(PushButton_Screenshot1, "4;4", PushButton_Screenshot1_Options));
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWin.PushButton' at 4;4.", repo.MainWin.PushButtonInfo, new RecordItemIndex(1));
            repo.MainWin.PushButton.Click(new Location(PushButton_Screenshot1_2, "4;4", PushButton_Screenshot1_2_Options));
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWin.PushButton' at 4;4.", repo.MainWin.PushButtonInfo, new RecordItemIndex(2));
            repo.MainWin.PushButton.Click(new Location(PushButton_Screenshot2, "4;4", PushButton_Screenshot2_Options));
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'UmlautTecDraw.ThreePointRectangle' at 4;4.", repo.UmlautTecDraw.ThreePointRectangleInfo, new RecordItemIndex(3));
            repo.UmlautTecDraw.ThreePointRectangle.Click(new Location(ThreePointRectangle_Screenshot1, "4;4", ThreePointRectangle_Screenshot1_Options));
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MainWin.Canvas1.CanvasCtrl' at 4;4.", repo.MainWin.Canvas1.CanvasCtrlInfo, new RecordItemIndex(4));
            repo.MainWin.Canvas1.CanvasCtrl.Click(new Location(CanvasCtrl_Screenshot1, "4;4", CanvasCtrl_Screenshot1_Options));
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Right Click item 'MainWin.Canvas1.CanvasCtrl' at 4;4.", repo.MainWin.Canvas1.CanvasCtrlInfo, new RecordItemIndex(5));
            repo.MainWin.Canvas1.CanvasCtrl.Click(System.Windows.Forms.MouseButtons.Right, new Location(CanvasCtrl_Screenshot2, "4;4", CanvasCtrl_Screenshot2_Options));
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Escape}' with focus on 'MainWin.Canvas1.CanvasCtrl'.", repo.MainWin.Canvas1.CanvasCtrlInfo, new RecordItemIndex(6));
            repo.MainWin.Canvas1.CanvasCtrl.PressKeys("{Escape}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Down item 'MainWin.Canvas1.CanvasCtrl' at 6;13.", repo.MainWin.Canvas1.CanvasCtrlInfo, new RecordItemIndex(7));
            repo.MainWin.Canvas1.CanvasCtrl.MoveTo(new Location(CanvasCtrl_Screenshot3, "6;13", CanvasCtrl_Screenshot3_Options));
            Mouse.ButtonDown(System.Windows.Forms.MouseButtons.Left);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Down item 'MainWin.Canvas1.CanvasCtrl' at 15;14.", repo.MainWin.Canvas1.CanvasCtrlInfo, new RecordItemIndex(8));
            repo.MainWin.Canvas1.CanvasCtrl.MoveTo(new Location(CanvasCtrl_Screenshot4, "15;14", CanvasCtrl_Screenshot4_Options));
            Mouse.ButtonDown(System.Windows.Forms.MouseButtons.Left);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        CompressedImage PushButton_Screenshot1
        { get { return repo.MainWin.PushButtonInfo.GetScreenshot1(new Rectangle(20, 3, 9, 10)); } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        Imaging.FindOptions PushButton_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        CompressedImage PushButton_Screenshot1_2
        { get { return repo.MainWin.PushButtonInfo.GetScreenshot1(new Rectangle(20, 8, 9, 8)); } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        Imaging.FindOptions PushButton_Screenshot1_2_Options
        { get { return Imaging.FindOptions.Default; } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        CompressedImage PushButton_Screenshot2
        { get { return repo.MainWin.PushButtonInfo.GetScreenshot2(new Rectangle(77, 11, 8, 8)); } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        Imaging.FindOptions PushButton_Screenshot2_Options
        { get { return Imaging.FindOptions.Default; } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        CompressedImage ThreePointRectangle_Screenshot1
        { get { return repo.UmlautTecDraw.ThreePointRectangleInfo.GetScreenshot1(new Rectangle(468, 15, 8, 8)); } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        Imaging.FindOptions ThreePointRectangle_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        CompressedImage CanvasCtrl_Screenshot1
        { get { return repo.MainWin.Canvas1.CanvasCtrlInfo.GetScreenshot1(new Rectangle(469, 175, 8, 8)); } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        Imaging.FindOptions CanvasCtrl_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        CompressedImage CanvasCtrl_Screenshot2
        { get { return repo.MainWin.Canvas1.CanvasCtrlInfo.GetScreenshot2(new Rectangle(469, 175, 8, 8)); } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        Imaging.FindOptions CanvasCtrl_Screenshot2_Options
        { get { return Imaging.FindOptions.Default; } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        CompressedImage CanvasCtrl_Screenshot3
        { get { return repo.MainWin.Canvas1.CanvasCtrlInfo.GetScreenshot3(new Rectangle(375, 136, 12, 25)); } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        Imaging.FindOptions CanvasCtrl_Screenshot3_Options
        { get { return Imaging.FindOptions.Default; } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        CompressedImage CanvasCtrl_Screenshot4
        { get { return repo.MainWin.Canvas1.CanvasCtrlInfo.GetScreenshot4(new Rectangle(427, 188, 26, 26)); } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        Imaging.FindOptions CanvasCtrl_Screenshot4_Options
        { get { return Imaging.FindOptions.Default; } }

#endregion
    }
#pragma warning restore 0436
}
